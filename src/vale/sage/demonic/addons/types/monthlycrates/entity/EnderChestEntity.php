<?php
namespace vale\sage\demonic\addons\types\monthlycrates\entity;

use pocketmine\entity\Entity;
use pocketmine\entity\EntitySizeInfo;
use pocketmine\entity\Living;
use pocketmine\entity\Location;
use pocketmine\event\entity\EntityDamageEvent;
use pocketmine\item\Item;
use pocketmine\item\ItemFactory;
use pocketmine\item\ItemIds;
use pocketmine\item\VanillaItems;
use pocketmine\nbt\tag\CompoundTag;
use pocketmine\network\mcpe\convert\TypeConverter;
use pocketmine\network\mcpe\protocol\MobEquipmentPacket;
use pocketmine\network\mcpe\protocol\types\entity\EntityIds;
use pocketmine\network\mcpe\protocol\types\entity\EntityMetadataProperties;
use pocketmine\network\mcpe\protocol\types\inventory\ContainerIds;
use pocketmine\network\mcpe\protocol\types\inventory\ItemStackWrapper;
use pocketmine\network\mcpe\protocol\types\inventory\WindowTypes;
use pocketmine\player\Player;
use pocketmine\Server;
use pocketmine\world\particle\CriticalParticle;
use vale\sage\demonic\entitys\types\TextEntity;

class EnderChestEntity extends Living
{
    /** @var Item */
	protected Item $item_in_hand;

    /** @var Location */
	public Location $baseLoc;

    /** @var array */
	public array $spawned = [];

    /** @var float */
	public $scale = 1.6;

    /** @var Player|null */
	public ?Player $player = null;

    /** @var int */
    public $timetoSpin = 30;

    /** @var int */
    public int $increasey = 10;

    /**
     * @param Location $location
     * @param Location $baseLoc
     * @param Player|null $player
     * @param CompoundTag|null $nbt
     */
	public function __construct(Location $location, Location $baseLoc, ?Player $player = null, ?CompoundTag $nbt = null)
	{
		$this->setInvisible(true);
		$this->baseLoc = $baseLoc;
		$this->id = Entity::nextRuntimeId();
		$this->setItemInHand(ItemFactory::getInstance()->get(ItemIds::DIAMOND_SWORD,0,1));
		$this->entity = new TextEntity($this->baseLoc);
		$this->entity->spawnToAll();
		parent::__construct($location, $nbt);
	}

    /**
     * @param EntityDamageEvent $source
     * @return void
     */
	public function attack(EntityDamageEvent $source): void
	{
		$source->cancel();
	}

	public function setPose(): void{
		$this->getNetworkProperties()->setInt(EntityMetadataProperties::ARMOR_STAND_POSE_INDEX, 3);
		$this->scheduleUpdate();
	}

    /**
     * @param Location $location
     * @return void
     */
	public function setBaseLoc(Location $location): void{
		$this->baseLoc = $location;
	}

    /**
     * @return EntitySizeInfo
     */
	protected function getInitialSizeInfo(): EntitySizeInfo
	{
		return new EntitySizeInfo(1, 1);
	}

    /**
     * @param Player $player
     * @return void
     */
	public function setPlayer(Player $player): void{
		$this->player = $player;
	}

    /**
     * @return Item
     */
	public function getItemInHand(): Item
	{
		return $this->item_in_hand;
	}

    /**
     * @return bool
     */
	public function hasItem(): bool
	{
		return $this->item_in_hand instanceof Item;
	}

    /**
     * @param Item $item_in_hand
     * @return void
     */
	public function setItemInHand(Item $item_in_hand): void
	{
		$this->item_in_hand = $item_in_hand;
		$packet = MobEquipmentPacket::create($this->getId(), ItemStackWrapper::legacy(TypeConverter::getInstance()->coreItemStackToNet($this->getItemInHand())), 0, ContainerIds::INVENTORY, WindowTypes::INVENTORY);
		foreach ($this->getViewers() as $viewer) {
			$viewer->getNetworkSession()->sendDataPacket($packet);
		}
	}

    /**
     * @param int $currentTick
     * @return bool
     */
	public function onUpdate(int $currentTick = 1): bool
	{
		$this->setItemInHand(ItemFactory::getInstance()->get(ItemIds::ENDER_CHEST));
		if($this->increasey >= 0){
			$this->increasey--;
		}
		if($this->increasey > 0){
			$this->location->y+= 0.1;
		}
				$this->location->yaw -= 30;
		return parent::onUpdate($currentTick); // TODO: Change the autogenerated stub
	}

    /**
     * @return string
     */
	public static function getNetworkTypeId(): string
	{
		return EntityIds::ARMOR_STAND;
	}

    /**
     * @return string
     */
	public function getName(): string
	{
		return "aEnder";
	}
}