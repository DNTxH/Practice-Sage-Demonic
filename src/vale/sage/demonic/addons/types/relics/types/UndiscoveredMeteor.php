<?php
namespace vale\sage\demonic\addons\types\relics\types;


use pocketmine\block\VanillaBlocks;
use pocketmine\entity\EntitySizeInfo;
use pocketmine\entity\Living;
use pocketmine\entity\Location;
use pocketmine\event\entity\EntityDamageByEntityEvent;
use pocketmine\event\entity\EntityDamageEvent;
use pocketmine\nbt\tag\CompoundTag;
use pocketmine\network\mcpe\protocol\types\entity\EntityIds;
use pocketmine\player\Player;
use pocketmine\world\particle\BlockBreakParticle;
use pocketmine\world\particle\FlameParticle;
use pocketmine\world\Position;
use vale\sage\demonic\Loader;
use vale\sage\demonic\Utils;

class UndiscoveredMeteor extends Living{

	/** @var float **/
	public $height = 0.3125;
	/** @var float **/
	public $width = 0.3125;
    /** @var int  */
	public $scale = 2;
    /** @var Position|null */
	public ?Position $position = null;

    /**
     * @param Location $location
     * @param CompoundTag|null $nbt
     * @param Position|null $position
     */
	public function __construct(Location $location, ?CompoundTag $nbt = null, Position $position = null)
	{
		$this->setHasGravity(false);
		$this->extinguish();
		$this->setNameTagAlwaysVisible(true);
		$this->setNameTag("§r§6§l*** UNDISCOVERED METEOR *** \n §r§7Destroy this Meteor with \n §r§7your Pickaxe to get its Contents.");
		parent::__construct($location, $nbt);
	}

	/**
	 * @param $pos
	 * @return void
	 */
	public function setPos(Position $pos): void{
		$this->teleport($pos->add(1.5,1.5,0));
	}

	public function attack(EntityDamageEvent $source): void
	{
		if ($source instanceof EntityDamageByEntityEvent) {
			$damager = $source->getDamager();
			if ($damager instanceof Player) {
				$this->flagForDespawn();
				$this->getWorld()->addParticle($this->getPosition(), new BlockBreakParticle(VanillaBlocks::SOUL_SAND()));
				Loader::playSound($damager, "mob.phantom.swoop");
			}
		}
	}

	public function onUpdate(int $currentTick): bool
	{
		if($this->isFlaggedForDespawn()) return false;
		$vector = Utils::getRandomVector()->multiply(4);
		$this->location->getWorld()->addParticle($this->location->add($vector->x, $vector->y, $vector->z), new FlameParticle());
		return parent::onUpdate($currentTick); // TODO: Change the autogenerated stub
	}

    /**
     * @return EntitySizeInfo
     */
	protected function getInitialSizeInfo(): EntitySizeInfo
	{
		return new EntitySizeInfo(1,1,1);
	}

    /**
     * @return string
     */
	public static function getNetworkTypeId(): string
	{
		return EntityIds::SHULKER_BULLET;
	}

    /**
     * @return string
     */
	public function getName(): string
	{
		return "Relic";
	}
}
