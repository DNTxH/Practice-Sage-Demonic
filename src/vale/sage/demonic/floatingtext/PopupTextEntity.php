<?php

declare(strict_types = 1);

#   /\ /\___ _ __ __ _ ___
#   \ \ / / _ \ '__/ _`|/_\
#    \ V / __/ | | (_| |__/
#     \_/ \___ |_| \__,|\___
#                  |___/

namespace vale\sage\demonic\floatingtext;


use pocketmine\entity\Entity;
use pocketmine\entity\EntitySizeInfo;
use pocketmine\entity\Location;
use pocketmine\nbt\tag\CompoundTag;
use pocketmine\network\mcpe\protocol\types\entity\EntityIds;
use pocketmine\world\Position;
use pocketmine\world\World;

class PopupTextEntity extends Entity{

	public const NETWORK_ID = EntityIds::CAT;
	/** @var float **/
	public $height = 0.7;
	/** @var float **/
	public $width = 0.6;

	/** @var float **/
	protected $gravity = 0.00;

	private static $life_tick;

	public function __construct(Location $level, CompoundTag $nbt = null, int $tick = 20){
		parent::__construct($level, $nbt);
		self::$life_tick = $tick;

	}


	/** Spawns the popup
	 *
	 * @param Location $pos
	 * @param int $newlife
	 * @return PopupTextEntity
	 * @var string|$text
	 */
	public static function spawnText(Location $pos, string $text, int $newlife = 20) : self{

		$entity = new self($pos, null, $newlife);
		$entity->setNametag($text);
		# $entity->setNametagAlwaysVisible(true);
		$entity->spawnToAll();
		return $entity;

	}

	/**
	 * @return string
	 */

	public function getName() : string{
		return "popup text";
	}

	protected function initEntity(CompoundTag $nbt): void
	{
		$this->setScale(0.0001);
		$this->setImmobile(true);
		$this->setCanSaveWithChunk(false);
		$this->setNameTagAlwaysVisible(true);
		parent::initEntity($nbt); // TODO: Change the autogenerated stub
	}

	public function entityBaseTick(int $tickDiff = 1) : bool{
		$this->motion->withComponents(0, 0, 0);
		if(self::$life_tick > 0) self::$life_tick--;
		if(self::$life_tick <= 0 && !$this->isFlaggedForDespawn()) $this->flagForDespawn();
		return parent::entityBaseTick($tickDiff);
	}

	protected function getInitialSizeInfo(): EntitySizeInfo
	{
		return new EntitySizeInfo(0,0,0);
	}

	public static function getNetworkTypeId(): string
	{
		return EntityIds::CAT;
	}
}
